#!/usr/bin/python
import os
import sys
import re
import struct
from subprocess import Popen, PIPE

def readelf(filename):
	process = Popen(["readelf", "-e", filename], stdout=PIPE)
	(output, err) = process.communicate()
	exit_code = process.wait()
	return output

def findEntryPoint(readelfOutput):
	entryPointRegex = re.compile('Entry point address: *0x([0-9a-f].*)')
	result = entryPointRegex.search(readelfOutput)
	if result:
		print "Found entry point at: " + result.group(1)
		return result.group(1)
	else:
		return 0

def findEntryPointOffset(readelfOutput, entryPointAdress):
	entyrPointOffsetRegex = re.compile(' *\[( *[0-9]*)\] ([.a-zA-Z-_]*) *([.a-zA-Z-_]*) *([0-9a-z]*) ([0-9a-z]*) ')
	result = entyrPointOffsetRegex.finditer(readelfOutput)

	print "Looking for offest of: " + entryPointAdress


	for match in result:
		if int(match.group(4), 16) == int(entryPointAdress, 16):
			print "Offset found: " + match.group(5)
			return match.group(5)
	return 0

def calculateDifferenceOfAddresses(address, address2):
	addressInt = int(address,16)
	address2Int = int(address2,16)
	addressDiff = abs(address2Int - addressInt)
	return str(format(addressDiff, 'x'))

def appendTwoAddresses(address, address2):
	addressInt = int(address,16)
	address2Int = int(address2,16)
	addressSum = address2Int + addressInt
	return str(format(addressSum, 'x'))

def makeBackup(filename):
	print "Your orginal file: " + filename + " was backed up as: " + filename + ".orginal"
	os.system('cp ' + filename + ' ' + filename + '.orginal')

def modifyFileAtCurrentPosition(fileObject):
	value = raw_input("Enter new value of byte in hex format (ex. a1): ")
	intValue = int(value,16)
	fileObject.write(struct.pack("B", intValue))

def openFileAtAddress(filename, addressOffset):
	exe = open(filename, 'rb+')
	exe.seek(int(addressOffset,16),0)
	modifyFileAtCurrentPosition(exe)

def isItAll():
	answer = raw_input("Do you want modify somethig more [y/N]: ")
	if answer == 'y' or answer == 'Y':
		return False
	return True

def main():
	filename = sys.argv[1]
	makeBackup(filename)
	elfOutput = readelf(filename)
	entryPointAddress = findEntryPoint(elfOutput)
	entryPointOffset = findEntryPointOffset(elfOutput,entryPointAddress)	
	while True:
		ownAddress = raw_input("Give offset read by objdump in hex format (ex. 8048beef): ")
		desiredAddress = calculateDifferenceOfAddresses(entryPointAddress, ownAddress)
		realAddress = appendTwoAddresses(entryPointOffset, desiredAddress)
		print "Offset in file: " + realAddress
		openFileAtAddress(sys.argv[1], realAddress)
		if isItAll():
			break

if __name__ == '__main__':
	main()